// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.22.0
// source: cache/v1/cache.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCacheServiceDelString = "/cache.v1.CacheService/DelString"
const OperationCacheServiceGetString = "/cache.v1.CacheService/GetString"
const OperationCacheServiceSetString = "/cache.v1.CacheService/SetString"

type CacheServiceHTTPServer interface {
	DelString(context.Context, *DelStringRequest) (*DelStringResponse, error)
	GetString(context.Context, *GetStringRequest) (*GetStringResponse, error)
	SetString(context.Context, *SetStringRequest) (*SetStringResponse, error)
}

func RegisterCacheServiceHTTPServer(s *http.Server, srv CacheServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cache/string/{key}", _CacheService_SetString0_HTTP_Handler(srv))
	r.GET("/v1/cache/string/{key}", _CacheService_GetString0_HTTP_Handler(srv))
	r.GET("/v1/cache/string/{key}", _CacheService_DelString0_HTTP_Handler(srv))
}

func _CacheService_SetString0_HTTP_Handler(srv CacheServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetStringRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCacheServiceSetString)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetString(ctx, req.(*SetStringRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetStringResponse)
		return ctx.Result(200, reply)
	}
}

func _CacheService_GetString0_HTTP_Handler(srv CacheServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStringRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCacheServiceGetString)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetString(ctx, req.(*GetStringRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStringResponse)
		return ctx.Result(200, reply)
	}
}

func _CacheService_DelString0_HTTP_Handler(srv CacheServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelStringRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCacheServiceDelString)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelString(ctx, req.(*DelStringRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelStringResponse)
		return ctx.Result(200, reply)
	}
}

type CacheServiceHTTPClient interface {
	DelString(ctx context.Context, req *DelStringRequest, opts ...http.CallOption) (rsp *DelStringResponse, err error)
	GetString(ctx context.Context, req *GetStringRequest, opts ...http.CallOption) (rsp *GetStringResponse, err error)
	SetString(ctx context.Context, req *SetStringRequest, opts ...http.CallOption) (rsp *SetStringResponse, err error)
}

type CacheServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCacheServiceHTTPClient(client *http.Client) CacheServiceHTTPClient {
	return &CacheServiceHTTPClientImpl{client}
}

func (c *CacheServiceHTTPClientImpl) DelString(ctx context.Context, in *DelStringRequest, opts ...http.CallOption) (*DelStringResponse, error) {
	var out DelStringResponse
	pattern := "/v1/cache/string/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCacheServiceDelString))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CacheServiceHTTPClientImpl) GetString(ctx context.Context, in *GetStringRequest, opts ...http.CallOption) (*GetStringResponse, error) {
	var out GetStringResponse
	pattern := "/v1/cache/string/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCacheServiceGetString))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CacheServiceHTTPClientImpl) SetString(ctx context.Context, in *SetStringRequest, opts ...http.CallOption) (*SetStringResponse, error) {
	var out SetStringResponse
	pattern := "/v1/cache/string/{key}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCacheServiceSetString))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
